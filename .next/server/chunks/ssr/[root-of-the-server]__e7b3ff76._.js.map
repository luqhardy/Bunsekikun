{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/luqmanhardy/Documents/GitHub/Bunsekikun/src/app/page.tsx"],"sourcesContent":["\"use client\";\nimport React, { useState, useMemo, useEffect } from 'react';\n\n// --- TypeScript Type Definitions ---\n\n// For the raw token returned by kuromoji.js\ninterface KuromojiToken {\n    surface_form: string;\n    pos: string;\n    pos_detail_1: string;\n    pos_detail_2: string;\n    pos_detail_3: string;\n    conjugated_type: string;\n    conjugated_form: string;\n    basic_form: string;\n    reading: string;\n    pronunciation: string;\n}\n\n// For the tokenizer object itself\ninterface KuromojiTokenizer {\n    tokenize: (text: string) => KuromojiToken[];\n}\n\n// To let TypeScript know about the kuromoji object on the window\ndeclare global {\n    interface Window {\n        kuromoji: {\n            builder: (options: { dicPath: string }) => {\n                build: (callback: (err: Error | null, tokenizer: KuromojiTokenizer) => void) => void;\n            };\n        };\n    }\n}\n\n// The internal representation of a token [surface, reading, pos]\ntype AnalyzedToken = [string, string, string];\n// A \"word\" is a group of one or more tokens\ntype AnalyzedWord = AnalyzedToken[];\n\n// The final analysis result structure\ninterface AnalysisResult {\n    word_list: AnalyzedWord[];\n}\n\n// Types for the Jisho.org API response\ninterface JishoJapaneseWord {\n    word?: string;\n    reading?: string;\n}\ninterface JishoSense {\n    english_definitions: string[];\n    parts_of_speech: string[];\n    links: { text: string; url: string }[];\n    tags: string[];\n    restrictions: string[];\n    see_also: string[];\n    antonyms: string[];\n    source: any[];\n    info: string[];\n}\ninterface JishoData {\n    slug: string;\n    is_common: boolean;\n    tags: string[];\n    jlpt: string[];\n    japanese: JishoJapaneseWord[];\n    senses: JishoSense[];\n    attribution: {\n        jmdict: boolean;\n        jmnedict: boolean;\n        dbpedia: boolean | string;\n    };\n}\n\n\n// --- Helper Data ---\n\nconst posColors: { [key: string]: string } = {\n  \"名詞\": \"bg-green-200 text-green-800\",\n  \"助詞\": \"bg-yellow-200 text-yellow-800\",\n  \"動詞\": \"bg-red-200 text-red-800\",\n  \"助動詞\": \"bg-red-200 text-red-800\",\n  \"形容詞\": \"bg-blue-200 text-blue-800\",\n  \"副詞\": \"bg-purple-200 text-purple-800\",\n  \"接続詞\": \"bg-indigo-200 text-indigo-800\",\n  \"連体詞\": \"bg-pink-200 text-pink-800\",\n  \"感動詞\": \"bg-teal-200 text-teal-800\",\n  \"接頭詞\": \"bg-gray-200 text-gray-800\",\n  \"接尾辞\": \"bg-gray-200 text-gray-800\",\n  \"記号\": \"bg-gray-100 text-gray-600\",\n  \"フィラー\": \"bg-gray-200 text-gray-700\",\n  \"その他\": \"bg-gray-200 text-gray-700\",\n  \"補助記号\": \"bg-gray-100 text-gray-600\",\n  \"未知語\": \"bg-gray-300 text-gray-900\",\n};\n\n// --- Kuromoji & Jisho API Functions ---\n\nlet kuromojiTokenizer: KuromojiTokenizer | null = null;\n\nconst loadKuromoji = (setTokenizerLoading: React.Dispatch<React.SetStateAction<boolean>>): void => {\n    setTokenizerLoading(true);\n    const script = document.createElement('script');\n    script.src = \"https://cdn.jsdelivr.net/npm/kuromoji@0.1.2/build/kuromoji.js\";\n    script.async = true;\n    script.onload = () => {\n        window.kuromoji.builder({ dicPath: \"https://cdn.jsdelivr.net/npm/kuromoji@0.1.2/dict/\" }).build((err, tokenizer) => {\n            if (err) {\n                console.error(\"Kuromoji build error:\", err);\n                setTokenizerLoading(false);\n                return;\n            }\n            kuromojiTokenizer = tokenizer;\n            console.log(\"Kuromoji tokenizer loaded.\");\n            setTokenizerLoading(false);\n        });\n    };\n    script.onerror = () => {\n        console.error(\"Failed to load Kuromoji script.\");\n        setTokenizerLoading(false);\n    }\n    document.body.appendChild(script);\n};\n\nconst groupTokens = (tokens: KuromojiToken[]): AnalyzedWord[] => {\n    if (!tokens || tokens.length === 0) return [];\n    \n    const wordList: AnalyzedWord[] = [];\n    let currentWord: AnalyzedWord = [];\n\n    tokens.forEach(token => {\n        const newToken: AnalyzedToken = [token.surface_form, token.reading || token.surface_form, token.pos];\n        \n        if (currentWord.length === 0) {\n            currentWord.push(newToken);\n        } else {\n            const prevPos = currentWord[currentWord.length - 1][2];\n            if ((token.pos === '助動詞' && prevPos === '動詞') || \n                (token.pos === '助詞' && (token.pos_detail_1 === '接続助詞' || token.pos_detail_1 === '終助詞')) ||\n                (token.pos === '動詞' && prevPos === '動詞' && token.pos_detail_1 === '非自立') ||\n                (token.pos === '名詞' && token.pos_detail_1 === '接尾')\n            ) {\n                 currentWord.push(newToken);\n            } else {\n                wordList.push(currentWord);\n                currentWord = [newToken];\n            }\n        }\n    });\n\n    if (currentWord.length > 0) {\n        wordList.push(currentWord);\n    }\n\n    return wordList;\n}\n\nconst getWordMeaningWithJisho = async (word: string): Promise<JishoData | null> => {\n    console.log(`Getting Jisho definition for: ${word}`);\n    // Use the Next.js API route proxy\n    const response = await fetch(`/api/jisho?keyword=${encodeURIComponent(word)}`);\n    \n    if (!response.ok) {\n        throw new Error(`Jisho API call failed with status: ${response.status}`);\n    }\n    \n    const result = await response.json();\n    if (result.data && result.data.length > 0) {\n        return result.data[0];\n    } else {\n        return null;\n    }\n};\n\n// --- React Components ---\n\nconst Header: React.FC = () => (\n    <header className=\"text-center p-6 rounded-xl\">\n        <h1 className=\"text-4xl md:text-5xl font-bold text-blue-600 tracking-wider\">\n            {/*\n            <span className=\"inline-block bg-gray-200 rounded-full px-4 py-2 mr-2\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-8 w-8 inline-block text-blue-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" /></svg>\n            </span> */}\n            <img src=\"/assets/icon.png\" alt=\"Bunsekikun Icon\" className=\"inline-block h-40 w-auto align-middle mr-2\" />\n        </h1>\n        <p className=\"text-gray-500 mt-2\">Japanese Analyzer (Kuromoji & Jisho)</p>\n    </header>\n);\n\ninterface WordInfoProps {\n    selectedWord: AnalyzedWord | null;\n    onClose: () => void;\n}\n\nconst WordInfo: React.FC<WordInfoProps> = ({ selectedWord, onClose }) => {\n    const [jishoData, setJishoData] = useState<JishoData | null>(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        if (!selectedWord) {\n            setJishoData(null);\n            return;\n        }\n\n        const fetchMeaning = async () => {\n            setIsLoading(true);\n            setError('');\n            setJishoData(null);\n            try {\n                const baseForm = selectedWord[0][0]; \n                const result = await getWordMeaningWithJisho(baseForm);\n                setJishoData(result);\n            } catch (err) {\n                console.error(err);\n                setError(\"Failed to fetch definition from Jisho.org.\");\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchMeaning();\n    }, [selectedWord]);\n\n    if (!selectedWord) {\n        return (\n            <div className=\"mt-6 p-6 bg-white rounded-xl shadow-lg border border-gray-200 text-center text-gray-500\">\n                <p>Select a word to see its details here.</p>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"mt-6 p-6 bg-white rounded-xl shadow-lg border border-gray-200 relative animate-fade-in\">\n            <button onClick={onClose} className=\"absolute top-3 right-3 text-gray-400 hover:text-gray-600 transition-colors\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" /></svg>\n            </button>\n            <h3 className=\"text-2xl font-bold text-gray-800 mb-3\">{selectedWord.map(token => token[0]).join('')}</h3>\n            <div className=\"space-y-3 text-left\">\n                <p><strong className=\"font-semibold text-gray-600 w-24\">Reading: {selectedWord.map(token => token[1]).join('')}</strong></p>\n                <p><strong className=\"font-semibold text-gray-600 w-24\">Part of Speech: {selectedWord.map(t => t[2]).join(', ')}</strong></p>\n                <div className=\"pt-2\">\n                    <strong className=\"font-semibold text-gray-600 w-full inline-block\">Meaning (from Jisho.org):</strong>\n                    {isLoading && <p>Loading definition...</p>}\n                    {error && <p className=\"text-red-500\">{error}</p>}\n                    {jishoData ? (\n                        <div className=\"mt-2 space-y-3 pl-2 border-l-4 border-gray-200\">\n                            {jishoData.senses.map((sense, index) => (\n                                <div key={index}>\n                                    <p className=\"font-medium text-gray-700\">{index + 1}. {sense.english_definitions.join('; ')}</p>\n                                    <p className=\"text-sm text-gray-500 ml-4\">{sense.parts_of_speech.join(', ')}</p>\n                                </div>\n                            ))}\n                        </div>\n                    ) : (!isLoading && <p>No definition found.</p>)}\n                </div>\n            </div>\n        </div>\n    );\n};\n\ninterface AnalysisDisplayProps {\n    analysis: AnalysisResult | null;\n    onWordSelect: (word: AnalyzedWord) => void;\n    selectedWord: AnalyzedWord | null;\n}\n\nconst AnalysisDisplay: React.FC<AnalysisDisplayProps> = ({ analysis, onWordSelect, selectedWord }) => {\n    if (!analysis) return null;\n\n    const createKey = (word: AnalyzedWord) => word.map(token => token[0]).join('-');\n\n    return (\n        <div className=\"mt-6 p-6 bg-white rounded-xl shadow-lg border border-gray-200 leading-loose text-2xl flex flex-wrap\">\n            {analysis.word_list.map((word, index) => {\n                const surface = word.map(token => token[0]).join('');\n                const reading = word.map(token => token[1]).join('');\n                const pos = word[0][2];\n                const colorClass = posColors[pos] || posColors[\"その他\"];\n                const isSelected = selectedWord && createKey(word) === createKey(selectedWord);\n\n                return (\n                    <span\n                        key={`${index}-${surface}`}\n                        onClick={() => onWordSelect(word)}\n                        className={`inline-block cursor-pointer transition-all duration-200 ease-in-out m-1 p-1 rounded-md ${colorClass} ${isSelected ? 'ring-2 ring-blue-500 scale-105' : 'hover:scale-105'}`}\n                    >\n                        <ruby>\n                            {surface}\n                            <rp>(</rp><rt className=\"text-sm font-light\">{reading}</rt><rp>)</rp>\n                        </ruby>\n                    </span>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default function App() {\n    const [inputText, setInputText] = useState(\"僕らは命に嫌われている。\");\n    const [analysis, setAnalysis] = useState<AnalysisResult | null>(null);\n    const [selectedWord, setSelectedWord] = useState<AnalyzedWord | null>(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [tokenizerLoading, setTokenizerLoading] = useState(true);\n    const [error, setError] = useState<string | null>(null);\n\n    useEffect(() => {\n        loadKuromoji(setTokenizerLoading);\n    }, []);\n\n    const handleAnalyse = () => {\n        if (!inputText.trim()) {\n            setError(\"Please enter some text to analyze.\");\n            return;\n        }\n        if (tokenizerLoading || !kuromojiTokenizer) {\n            setError(\"Tokenizer is not ready yet. Please wait.\");\n            return;\n        }\n        setIsLoading(true);\n        setError(null);\n        setAnalysis(null);\n        setSelectedWord(null);\n        \n        try {\n            const tokens = kuromojiTokenizer.tokenize(inputText);\n            const groupedTokens = groupTokens(tokens);\n            setAnalysis({ word_list: groupedTokens });\n        } catch (err) {\n            setError(\"Failed to analyze text.\");\n            console.error(err);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const handleWordSelect = (word: AnalyzedWord) => {\n        setSelectedWord(word);\n    };\n    \n    const handleCloseInfo = () => {\n        setSelectedWord(null);\n    }\n\n    const exampleTexts = useMemo(() => [\"僕らは命に嫌われている。\", \"価値観もエゴも押し付けて\", \"軽々しく死にたいだとか\"], []);\n\n    return (\n        <div className=\"min-h-screen bg-gray-50 font-sans p-4 sm:p-6 md:p-8\">\n            <style>{`.animate-fade-in { animation: fade-in 0.3s ease-out forwards; } @keyframes fade-in { from { opacity: 0; transform: translateY(-10px); } to { opacity: 1; transform: translateY(0); } }`}</style>\n            <div className=\"max-w-4xl mx-auto\">\n                <Header />\n\n                <main className=\"mt-8\">\n                    <div className=\"bg-white p-6 rounded-xl shadow-lg border border-gray-200\">\n                        <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">Enter Japanese Text</h2>\n                        <textarea value={inputText} onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setInputText(e.target.value)} className=\"text-black w-full h-32 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\" placeholder=\"ここに日本語の文章を入力してください...\"/>\n                        <div className=\"mt-4 flex flex-col sm:flex-row items-center justify-between gap-4\">\n                            <button onClick={handleAnalyse} disabled={isLoading || tokenizerLoading} className=\"w-full sm:w-auto bg-blue-600 text-white font-bold py-3 px-8 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-300 transition-all disabled:bg-blue-300 disabled:cursor-not-allowed flex items-center justify-center shadow-lg\">\n                                {tokenizerLoading ? \"Loading Analyzer...\" : (isLoading ? \"Analyzing...\" : \"Analyse Text!\")}\n                            </button>\n                             <div className=\"text-sm text-gray-500 flex-wrap\">Or try an example:\n                                {exampleTexts.map(text => (<button key={text} onClick={() => setInputText(text)} className=\"ml-2 text-blue-500 hover:underline\">`{text}`</button>))}\n                            </div>\n                        </div>\n                        {error && <p className=\"mt-4 text-red-600 bg-red-100 p-3 rounded-lg\">{error}</p>}\n                    </div>\n                    \n                    {analysis && <div className=\"animate-fade-in\"><AnalysisDisplay analysis={analysis} onWordSelect={handleWordSelect} selectedWord={selectedWord} /></div>}\n                    <WordInfo selectedWord={selectedWord} onClose={handleCloseInfo} />\n                </main>\n            </div>\n        </div>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 603, "column": 0}, "map": {"version":3,"sources":["file:///Users/luqmanhardy/Documents/GitHub/Bunsekikun/node_modules/next/src/server/route-modules/app-page/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/app-page/module.js')\n} else {\n  if (process.env.__NEXT_EXPERIMENTAL_REACT) {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.prod.js')\n      }\n    }\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.prod.js')\n      }\n    }\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","__NEXT_EXPERIMENTAL_REACT","NODE_ENV","TURBOPACK"],"mappings":";AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,MAAQ;;AAEzC,OAAO;IACL,IAAIF,QAAQC,GAAG,CAACK,uBAA2B,EAAF;;IAczC,OAAO;QACL,IAAIN,QAAQC,GAAG,CAACM,QAAQ,KAAK,WAAe;YAC1C,IAAIP,QAAQC,GAAG,CAACO,SAAS,eAAE;gBACzBL,OAAOC,OAAO,GAAGC,QAAQ;YAC3B,OAAO;;YAEP;QACF,OAAO;;QAMP;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 626, "column": 0}, "map": {"version":3,"sources":["file:///Users/luqmanhardy/Documents/GitHub/Bunsekikun/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored[\n  'react-ssr'\n].ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,4HAAyBC,QAAQ,CACxD,YACD,CAACC,kBAAkB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 633, "column": 0}, "map": {"version":3,"sources":["file:///Users/luqmanhardy/Documents/GitHub/Bunsekikun/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored['react-ssr'].React\n"],"names":["module","exports","require","vendored","React"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,4HAAyBC,QAAQ,CAAC,YAAY,CAACC,KAAK","ignoreList":[0],"debugId":null}}]
}